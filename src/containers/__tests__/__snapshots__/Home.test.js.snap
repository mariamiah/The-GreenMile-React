// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Home /> should handle change 1`] = `
Home {
  "componentWillReceiveProps": [Function],
  "context": Object {},
  "handleChange": [Function],
  "handleSubmit": [Function],
  "props": Object {
    "LoginAction": [MockFunction],
    "loginState": Object {
      "error": Object {
        "message": "error",
      },
    },
  },
  "refs": Object {},
  "setState": [Function],
  "state": Object {
    "mia": undefined,
    "password": "",
    "username": "",
  },
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_didScheduleRenderPhaseUpdate": false,
      "_dispatcher": Object {
        "readContext": [Function],
        "useCallback": [Function],
        "useContext": [Function],
        "useDebugValue": [Function],
        "useEffect": [Function],
        "useImperativeHandle": [Function],
        "useLayoutEffect": [Function],
        "useMemo": [Function],
        "useReducer": [Function],
        "useRef": [Function],
        "useResponder": [Function],
        "useState": [Function],
      },
      "_element": <Home
        LoginAction={[MockFunction]}
        loginState={
          Object {
            "error": Object {
              "message": "error",
            },
          }
        }
      />,
      "_firstWorkInProgressHook": null,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_isReRender": false,
      "_newState": null,
      "_numberOfReRenders": 0,
      "_renderPhaseUpdates": null,
      "_rendered": <div>
        <LandingPage
          onChange={[Function]}
          onSubmit={[Function]}
        />
        <ToastContainer
          autoClose={5000}
          bodyClassName={null}
          className={null}
          closeButton={
            <CloseButton
              ariaLabel="close"
            />
          }
          closeOnClick={true}
          draggable={true}
          draggablePercent={80}
          hideProgressBar={false}
          newestOnTop={false}
          pauseOnFocusLoss={true}
          pauseOnHover={true}
          position="top-right"
          progressClassName={null}
          progressStyle={null}
          rtl={false}
          style={null}
          toastClassName={null}
          transition={[Function]}
        />
      </div>,
      "_rendering": false,
      "_updater": [Circular],
      "_workInProgressHook": null,
    },
  },
}
`;

exports[`<Home /> should handle errors on failed registration 1`] = `ShallowWrapper {}`;

exports[`<Home /> should handle submit 1`] = `
Home {
  "componentWillReceiveProps": [Function],
  "context": Object {},
  "handleChange": [Function],
  "handleSubmit": [Function],
  "props": Object {
    "LoginAction": [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "password": "",
            "username": "",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    },
    "loginState": Object {
      "error": Object {
        "message": "error",
      },
    },
  },
  "refs": Object {},
  "setState": [Function],
  "state": Object {
    "password": "",
    "username": "",
  },
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_didScheduleRenderPhaseUpdate": false,
      "_dispatcher": Object {
        "readContext": [Function],
        "useCallback": [Function],
        "useContext": [Function],
        "useDebugValue": [Function],
        "useEffect": [Function],
        "useImperativeHandle": [Function],
        "useLayoutEffect": [Function],
        "useMemo": [Function],
        "useReducer": [Function],
        "useRef": [Function],
        "useResponder": [Function],
        "useState": [Function],
      },
      "_element": <Home
        LoginAction={
          [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "password": "",
                  "username": "",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        loginState={
          Object {
            "error": Object {
              "message": "error",
            },
          }
        }
      />,
      "_firstWorkInProgressHook": null,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_isReRender": false,
      "_newState": null,
      "_numberOfReRenders": 0,
      "_renderPhaseUpdates": null,
      "_rendered": <div>
        <LandingPage
          onChange={[Function]}
          onSubmit={[Function]}
        />
        <ToastContainer
          autoClose={5000}
          bodyClassName={null}
          className={null}
          closeButton={
            <CloseButton
              ariaLabel="close"
            />
          }
          closeOnClick={true}
          draggable={true}
          draggablePercent={80}
          hideProgressBar={false}
          newestOnTop={false}
          pauseOnFocusLoss={true}
          pauseOnHover={true}
          position="top-right"
          progressClassName={null}
          progressStyle={null}
          rtl={false}
          style={null}
          toastClassName={null}
          transition={[Function]}
        />
      </div>,
      "_rendering": false,
      "_updater": [Circular],
      "_workInProgressHook": null,
    },
  },
}
`;

exports[`<Home /> should handle success with admin token 1`] = `
Home {
  "componentWillReceiveProps": [Function],
  "context": Object {},
  "handleChange": [Function],
  "handleSubmit": [Function],
  "props": Object {
    "LoginAction": [MockFunction],
    "loginState": Object {
      "user": Object {
        "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiQWRtaW4iLCJleHAiOjE1NTIwMTM4MDcsInJvbGVzIjpbIkFkbWluIl19.FLwsnsZnQWBC3u18oxvTtMTAqht2crgH4O7W2JM9Ql8",
      },
    },
  },
  "refs": Object {},
  "setState": [Function],
  "state": Object {
    "password": "",
    "username": "",
  },
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_didScheduleRenderPhaseUpdate": false,
      "_dispatcher": Object {
        "readContext": [Function],
        "useCallback": [Function],
        "useContext": [Function],
        "useDebugValue": [Function],
        "useEffect": [Function],
        "useImperativeHandle": [Function],
        "useLayoutEffect": [Function],
        "useMemo": [Function],
        "useReducer": [Function],
        "useRef": [Function],
        "useResponder": [Function],
        "useState": [Function],
      },
      "_element": <Home
        LoginAction={[MockFunction]}
        loginState={
          Object {
            "user": Object {
              "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiQWRtaW4iLCJleHAiOjE1NTIwMTM4MDcsInJvbGVzIjpbIkFkbWluIl19.FLwsnsZnQWBC3u18oxvTtMTAqht2crgH4O7W2JM9Ql8",
            },
          }
        }
      />,
      "_firstWorkInProgressHook": null,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_isReRender": false,
      "_newState": null,
      "_numberOfReRenders": 0,
      "_renderPhaseUpdates": null,
      "_rendered": <div>
        <LandingPage
          onChange={[Function]}
          onSubmit={[Function]}
        />
        <ToastContainer
          autoClose={5000}
          bodyClassName={null}
          className={null}
          closeButton={
            <CloseButton
              ariaLabel="close"
            />
          }
          closeOnClick={true}
          draggable={true}
          draggablePercent={80}
          hideProgressBar={false}
          newestOnTop={false}
          pauseOnFocusLoss={true}
          pauseOnHover={true}
          position="top-right"
          progressClassName={null}
          progressStyle={null}
          rtl={false}
          style={null}
          toastClassName={null}
          transition={[Function]}
        />
      </div>,
      "_rendering": false,
      "_updater": [Circular],
      "_workInProgressHook": null,
    },
  },
}
`;

exports[`<Home /> should handle success with attendant token 1`] = `
Home {
  "componentWillReceiveProps": [Function],
  "context": Object {},
  "handleChange": [Function],
  "handleSubmit": [Function],
  "props": Object {
    "LoginAction": [MockFunction],
    "loginState": Object {
      "user": Object {
        "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoibWltaSIsImV4cCI6MTU1MjAxNjg2NSwicm9sZXMiOlsiQXR0ZW5kYW50Il19._sriBnI7smmCy6B_vy20LwBGh0vOW-ze1QbBzV5BiL4",
      },
    },
  },
  "refs": Object {},
  "setState": [Function],
  "state": Object {
    "password": "",
    "username": "",
  },
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_didScheduleRenderPhaseUpdate": false,
      "_dispatcher": Object {
        "readContext": [Function],
        "useCallback": [Function],
        "useContext": [Function],
        "useDebugValue": [Function],
        "useEffect": [Function],
        "useImperativeHandle": [Function],
        "useLayoutEffect": [Function],
        "useMemo": [Function],
        "useReducer": [Function],
        "useRef": [Function],
        "useResponder": [Function],
        "useState": [Function],
      },
      "_element": <Home
        LoginAction={[MockFunction]}
        loginState={
          Object {
            "user": Object {
              "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoibWltaSIsImV4cCI6MTU1MjAxNjg2NSwicm9sZXMiOlsiQXR0ZW5kYW50Il19._sriBnI7smmCy6B_vy20LwBGh0vOW-ze1QbBzV5BiL4",
            },
          }
        }
      />,
      "_firstWorkInProgressHook": null,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_isReRender": false,
      "_newState": null,
      "_numberOfReRenders": 0,
      "_renderPhaseUpdates": null,
      "_rendered": <div>
        <LandingPage
          onChange={[Function]}
          onSubmit={[Function]}
        />
        <ToastContainer
          autoClose={5000}
          bodyClassName={null}
          className={null}
          closeButton={
            <CloseButton
              ariaLabel="close"
            />
          }
          closeOnClick={true}
          draggable={true}
          draggablePercent={80}
          hideProgressBar={false}
          newestOnTop={false}
          pauseOnFocusLoss={true}
          pauseOnHover={true}
          position="top-right"
          progressClassName={null}
          progressStyle={null}
          rtl={false}
          style={null}
          toastClassName={null}
          transition={[Function]}
        />
      </div>,
      "_rendering": false,
      "_updater": [Circular],
      "_workInProgressHook": null,
    },
  },
}
`;

exports[`<Home /> should render without crashing 1`] = `ShallowWrapper {}`;
